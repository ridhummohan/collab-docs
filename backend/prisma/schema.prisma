// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  documents     Document[]
  comments      Comment[]
  sharedDocs    DocumentShare[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application models
model Document {
  id        String          @id @default(cuid())
  title     String
  content   String          @default("")
  authorId  String
  author    User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  Comment[]
  shares    DocumentShare[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model Comment {
  id         String   @id @default(cuid())
  text       String
  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  authorId   String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  timestamp  DateTime @default(now())
}

model DocumentShare {
  id           String   @id @default(cuid())
  documentId   String
  document     Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  sharedWithId String
  sharedWith   User     @relation(fields: [sharedWithId], references: [id], onDelete: Cascade)
  sharedAt     DateTime @default(now())

  @@unique([documentId, sharedWithId])
}
